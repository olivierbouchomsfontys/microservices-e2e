{
	"info": {
		"_postman_id": "0ff70f68-4bef-44ef-9896-70ba9e82b8c1",
		"name": "Onderzoek teststrategie",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Customer Create 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"id\": { \"type\": \"number\" },\r",
							"        \"name\": { \"type\": \"string\" }\r",
							"    },\r",
							"    \"required\": [\"id\", \"name\"]\r",
							"};\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('Schema is valid', () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"postman.setNextRequest('Customer GetAll 200');"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"name\": \"Olivier\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5020/customer",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5020",
					"path": [
						"customer"
					]
				}
			},
			"response": []
		},
		{
			"name": "Customer GetAll 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {\r",
							"    \"type\": \"array\",\r",
							"    \"items\":{\r",
							"        \"properties\": {\r",
							"            \"id\": { \"type\": \"number\" },\r",
							"            \"name\": { \"type\": \"string\" }\r",
							"        },\r",
							"        \"required\": [\"id\", \"name\"]\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('Schema is valid', () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"postman.setNextRequest('Customer Get 200');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5020/customer",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5020",
					"path": [
						"customer"
					]
				}
			},
			"response": []
		},
		{
			"name": "Customer Get 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"id\": { \"type\": \"number\" },\r",
							"        \"name\": { \"type\": \"string\" }\r",
							"    },\r",
							"    \"required\": [\"id\", \"name\"]\r",
							"};\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('Schema is valid', () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"postman.setNextRequest('Customer Get 404');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5020/customer/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5020",
					"path": [
						"customer",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Customer Get 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"title\": { \"type\": \"string\" },\r",
							"        \"message\": { \"type\": \"string\" },\r",
							"        \"status\": { \"type\": \"number\" },\r",
							"        \"statusDescription\": { \"type\": \"string\" }\r",
							"    },\r",
							"    \"required\": [\"title\", \"message\", \"status\", \"statusDescription\"]\r",
							"};\r",
							"\r",
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test('Schema is valid', () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"postman.setNextRequest('CustomerOrder Get 200');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5020/customer/9999",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5020",
					"path": [
						"customer",
						"9999"
					]
				}
			},
			"response": []
		},
		{
			"name": "CustomerOrder Get 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"customer\": { \r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"                \"id\": { \"type\": \"number\" },\r",
							"                \"name\": { \"type\": \"string\" }\r",
							"            },\r",
							"            \"required\": [\"id\", \"name\"]\r",
							"        },\r",
							"        \"orders\": { \r",
							"            \"type\": \"array\",\r",
							"            \"items\":  {\r",
							"                \"type\": \"object\",\r",
							"                \"properties\": {\r",
							"                    \"id\": { \"type\": \"number\" },\r",
							"                    \"created\": { \"type\": \"string\" },\r",
							"                    \"customerId\": { \"type\": \"number\"}\r",
							"                },\r",
							"                \"required\": [\"id\", \"created\", \"customerId\"]\r",
							"            }\r",
							"        },\r",
							"    },\r",
							"    \"required\": [\"customer\", \"orders\"]\r",
							"}\r",
							"\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('Schema is valid', () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"postman.setNextRequest('CustomerOrder Get 404')"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:5020/customerorder/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5020",
					"path": [
						"customerorder",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "CustomerOrder Get 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"title\": { \"type\": \"string\" },\r",
							"        \"message\": { \"type\": \"string\" },\r",
							"        \"status\": { \"type\": \"number\" },\r",
							"        \"statusDescription\": { \"type\": \"string\" }\r",
							"    },\r",
							"    \"required\": [\"title\", \"message\", \"status\", \"statusDescription\"]\r",
							"};\r",
							"\r",
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test('Schema is valid', () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"postman.setNextRequest('Order Create 200');"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:5020/customerorder/9999",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5020",
					"path": [
						"customerorder",
						"9999"
					]
				}
			},
			"response": []
		},
		{
			"name": "Order Create 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"id\": { \"type\": \"number\" },\r",
							"        \"created\": { \"type\": \"string\" },\r",
							"        \"customerId\": {\"type\": \"number\" }\r",
							"    },\r",
							"    \"required\": [\"id\", \"created\", \"customerId\"]\r",
							"};\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('Schema is valid', () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"postman.setNextRequest(\"Order GetAll 200\")"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"customerId\": 1,\r\n    \"created\": \"2021-01-01T15:00:00\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5020/order",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5020",
					"path": [
						"order"
					]
				}
			},
			"response": []
		},
		{
			"name": "Order GetAll 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {\r",
							"    \"type\": \"array\",\r",
							"    \"items\": {\r",
							"        \"type\": \"object\",\r",
							"        \"properties\": {\r",
							"            \"id\": { \"type\": \"number\" },\r",
							"            \"created\": { \"type\": \"string\" },\r",
							"            \"customerId\": {\"type\": \"number\" }\r",
							"        },  \r",
							"        \"required\": [\"id\", \"created\", \"customerId\"]\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('Schema is valid', () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"postman.setNextRequest(\"Order Get 200\")"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:5020/order",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5020",
					"path": [
						"order"
					]
				}
			},
			"response": []
		},
		{
			"name": "Order Get 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"id\": { \"type\": \"number\" },\r",
							"        \"created\": { \"type\": \"string\" },\r",
							"        \"customerId\": {\"type\": \"number\" }\r",
							"    },\r",
							"    \"required\": [\"id\", \"created\", \"customerId\"]\r",
							"};\r",
							"\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('Schema is valid', () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"postman.setNextRequest(\"Order Get 404\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:5020/order/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5020",
					"path": [
						"order",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Order Get 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"title\": { \"type\": \"string\" },\r",
							"        \"message\": { \"type\": \"string\" },\r",
							"        \"status\": { \"type\": \"number\" },\r",
							"        \"statusDescription\": { \"type\": \"string\" }\r",
							"    },\r",
							"    \"required\": [\"title\", \"message\", \"status\", \"statusDescription\"]\r",
							"};\r",
							"\r",
							"pm.test(\"Status code is 404\", () => {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test('Schema is valid', () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"postman.setNextRequest(\"Customer Delete 200\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:5020/order/9999",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5020",
					"path": [
						"order",
						"9999"
					]
				}
			},
			"response": []
		},
		{
			"name": "Customer Delete 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"id\": { \"type\": \"number\" },\r",
							"        \"name\": { \"type\": \"string\" }\r",
							"    },\r",
							"    \"required\": [\"id\", \"name\"]\r",
							"};\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('Schema is valid', () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"postman.setNextRequest('Customer Delete 404');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:5020/customer/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5020",
					"path": [
						"customer",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Customer Delete 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"title\": { \"type\": \"string\" },\r",
							"        \"message\": { \"type\": \"string\" },\r",
							"        \"status\": { \"type\": \"number\" },\r",
							"        \"statusDescription\": { \"type\": \"string\" }\r",
							"    },\r",
							"    \"required\": [\"title\", \"message\", \"status\", \"statusDescription\"]\r",
							"};\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test('Schema is valid', () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:5020/customer/9999",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5020",
					"path": [
						"customer",
						"9999"
					]
				}
			},
			"response": []
		}
	]
}